name: MicroPython Firmware

on:
  push:
  pull_request:
  release:
    types: [created]

env:
  MICROPYTHON_FLAVOUR: pimoroni/micropython
  MICROPYTHON_VERSION: feature/psram
  PIMORONI_PICO_VERSION: grey-badger-sounds-like-a-kojima-character
  WORKFLOW_VERSION: v5

jobs:
  deps:
    runs-on: ubuntu-20.04
    name: Dependencies
    steps:
    - name: Workspace Cache
      id: cache
      uses: actions/cache@v4
      with:
        path: ${{runner.workspace}}
        key: workspace-micropython-${{env.MICROPYTHON_VERSION}}-${{env.WORKFLOW_VERSION}}
        restore-keys: |
          workspace-micropython-${{env.MICROPYTHON_VERSION}}-${{env.WORKFLOW_VERSION}}

    # Check out MicroPython
    - name: Checkout MicroPython
      if: steps.cache.outputs.cache-hit != 'true'
      uses: actions/checkout@v4
      with:
        repository: ${{env.MICROPYTHON_FLAVOUR}}
        ref: ${{env.MICROPYTHON_VERSION}}
        submodules: false  # MicroPython submodules are hideously broken
        path: micropython

    - name: Fetch Pico submodules
      if: steps.cache.outputs.cache-hit != 'true'
      shell: bash
      working-directory: micropython
      run: |
        git submodule update --init lib/pico-sdk
        git submodule update --init lib/cyw43-driver
        git submodule update --init lib/lwip
        git submodule update --init lib/mbedtls
        git submodule update --init lib/micropython-lib
        git submodule update --init lib/tinyusb
        git submodule update --init lib/btstack

    - name: Build mpy-cross
      if: steps.cache.outputs.cache-hit != 'true'
      shell: bash
      working-directory: micropython/mpy-cross
      run: make

  build:
    needs: deps
    name: Build ${{matrix.name}}
    runs-on: ubuntu-20.04
    continue-on-error: true
    strategy:
      matrix:
        include:
          - name: Badger 2040
            shortname: badger2040
            board: PIMORONI_BADGER2040
          - name: Badger 2040 W
            shortname: badger2040w
            board: PIMORONI_BADGER2040W
          - name: Badger 2350
            shortname: badger2350
            board: PIMORONI_BADGER2350

    env:
      RELEASE_FILE: pimoroni-${{matrix.shortname}}-${{github.event.release.tag_name || github.sha}}-micropython.uf2
      RELEASE_FILE_WITH_OS: pimoroni-${{matrix.shortname}}-${{github.event.release.tag_name || github.sha}}-micropython-with-badger-os.uf2
      FIRMWARE_DIR: "$GITHUB_WORKSPACE/badger2040/firmware"
      BOARD_DIR: "$GITHUB_WORKSPACE/badger2040/firmware/${{matrix.board}}"
      BADGER_OS_DIR: "$GITHUB_WORKSPACE/badger2040/badger_os"

    steps:
    - name: Compiler Cache
      uses: actions/cache@v4
      with:
        path: /home/runner/.ccache
        key: ccache-micropython-${{matrix.shortname}}-${{github.ref}}-${{github.sha}}
        restore-keys: |
          ccache-micropython-${{matrix.shortname}}-${{github.ref}}
          ccache-micropython-${{matrix.shortname}}-

    - name: Workspace Cache
      uses: actions/cache@v4
      with:
        path: ${{runner.workspace}}
        key: workspace-micropython-${{env.MICROPYTHON_VERSION}}-${{env.WORKFLOW_VERSION}}
        restore-keys: |
          workspace-micropython-${{env.MICROPYTHON_VERSION}}-${{env.WORKFLOW_VERSION}}

    - uses: actions/checkout@v4
      with:
        submodules: true
        path: badger2040

    # Check out Pimoroni Pico
    - uses: actions/checkout@v4
      with:
        repository: pimoroni/pimoroni-pico
        ref: ${{env.PIMORONI_PICO_VERSION}}
        submodules: true
        path: pimoroni-pico

    - name: "Py_Decl: Checkout py_decl"
      uses: actions/checkout@v4
      with:
        repository: gadgetoid/py_decl
        ref: v0.0.3
        path: py_decl

    # Check out dir2u2f
    - uses: actions/checkout@v4
      with:
        repository: gadgetoid/dir2uf2
        ref: v0.0.8
        path: dir2uf2

    - name: Install Arm GNU Toolchain (arm-none-eabi-gcc)
      uses: carlosperate/arm-none-eabi-gcc-action@v1
      with:
        release: '9-2020-q2'

    # Install apt packages
    - name: Install CCache & Compiler
      shell: bash
      run:
        sudo apt update && sudo apt install ccache

    # Build firmware
    - name: Configure MicroPython
      shell: bash
      working-directory: micropython/ports/rp2
      run: |
        cmake -S . -B build -DPICO_BUILD_DOCS=0 -DUSER_C_MODULES=${{env.BOARD_DIR}}/micropython.cmake -DMICROPY_BOARD_DIR=${{env.BOARD_DIR}} -DMICROPY_BOARD=${{env.BOARD}} -DCMAKE_C_COMPILER_LAUNCHER=ccache -DCMAKE_CXX_COMPILER_LAUNCHER=ccache

    - name: Build MicroPython
      shell: bash
      working-directory: micropython/ports/rp2
      run: |
        ccache --zero-stats || true
        cmake --build build -j 2
        ccache --show-stats || true

    - name: Rename .uf2 for artifact
      shell: bash
      working-directory: micropython/ports/rp2/build
      run: |
        cp firmware.uf2 ${{env.RELEASE_FILE}}

    - name: "Py_Decl: Verify UF2"
      shell: bash
      run: |
        python3 py_decl/py_decl.py --to-json --verify micropython/ports/rp2/build/${{ env.RELEASE_FILE }}

    - name: Append Filesystem
      shell: bash
      run: |
        python3 -m pip install littlefs-python==0.12.0
        ./dir2uf2/dir2uf2 --fs-compact --append-to micropython/ports/rp2/build/${{env.RELEASE_FILE}} --manifest ${{env.BOARD_DIR}}/uf2-manifest.txt --filename with-badger-os.uf2 ${{env.BADGER_OS_DIR}}/

    - name: Store .uf2 as artifact
      uses: actions/upload-artifact@v4
      with:
        name: ${{env.RELEASE_FILE}}
        path: micropython/ports/rp2/build/${{env.RELEASE_FILE}}

    - name: Store .uf2 + Badger OS as artifact
      uses: actions/upload-artifact@v4
      with:
        name: ${{env.RELEASE_FILE_WITH_OS}}
        path: ${{env.RELEASE_FILE_WITH_OS}}

    - name: Upload .uf2
      if: github.event_name == 'release'
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{secrets.GITHUB_TOKEN}}
      with:
        asset_path: micropython/ports/rp2/build/${{env.RELEASE_FILE}}
        upload_url: ${{github.event.release.upload_url}}
        asset_name: ${{env.RELEASE_FILE}}
        asset_content_type: application/octet-stream

    - name: Upload .uf2 + Badger OS
      if: github.event_name == 'release'
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{secrets.GITHUB_TOKEN}}
      with:
        asset_path: ${{env.RELEASE_FILE_WITH_OS}}
        upload_url: ${{github.event.release.upload_url}}
        asset_name: ${{env.RELEASE_FILE_WITH_OS}}
        asset_content_type: application/octet-stream
